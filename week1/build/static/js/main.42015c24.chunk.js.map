{"version":3,"sources":["china.jpeg","italy.jpeg","switzerland.jpeg","uk.jpeg","Destination/Destination.js","Travel/Travel.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Destination","className","src","this","props","img","location","photos","React","Component","Travel","emoji","type","App","href","rel","italy","alt","switzerland","rating","china","uk","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oFAAAA,EAAOC,QAAU,IAA0B,oC,kBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,0C,gBCA3CD,EAAOC,QAAU,IAA0B,iC,+OCItBC,G,6KAEjB,OACE,yBAAKC,UAAU,eACb,yBAAKC,IAAKC,KAAKC,MAAMC,MACrB,uBAAGJ,UAAU,iBAAiBE,KAAKC,MAAME,UACzC,uBAAGL,UAAU,mBAAmBE,KAAKC,MAAMG,OAA3C,yB,GANiCC,IAAMC,YCD1BC,G,6KAEjB,OACE,yBAAKT,UAAU,8BACX,yBAAKA,UAAU,gBACZE,KAAKC,MAAMO,OAEbR,KAAKC,MAAMQ,U,GAPcJ,IAAMC,Y,iDC6D3BI,MAxDf,WACE,OACE,yBAAKZ,UAAU,OACb,0BAAMa,KAAK,6EAA6EC,IAAI,eAC5F,0BAAMD,KAAK,gEAAgEC,IAAI,eAE/E,yBAAKd,UAAU,kBACb,yBAAKC,IAAKc,IAAOf,UAAU,cAAcgB,IAAI,kBAC7C,uBAAGhB,UAAU,aAAb,aAGA,uBAAGA,UAAU,aAAb,2CAGA,uBAAGA,UAAU,sBAAb,gEAGA,gDAGF,yBAAKA,UAAU,SACb,6BACE,wBAAIA,UAAU,YAAd,YACA,4BACE,wBAAIA,UAAU,WAAd,WACA,yCACA,sCAIJ,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,mBACb,kBAAC,EAAD,CAAaI,IAAKa,IAAaZ,SAAS,cAAcC,OAAO,KAAKY,OAAO,MAAMF,IAAI,uBACnF,kBAAC,EAAD,CAAaZ,IAAMe,IAAOd,SAAS,QAAQC,OAAO,KAAKY,OAAO,MAAMF,IAAI,iBACxE,kBAAC,EAAD,CAAaZ,IAAKgB,IAAIf,SAAS,KAAKC,OAAO,KAAKY,OAAO,MAAMF,IAAI,cACjE,kBAAC,EAAD,CAAaZ,IAAMe,IAAOd,SAAS,QAAQC,OAAO,KAAKY,OAAO,MAAMF,IAAI,mBAI5E,yBAAKhB,UAAU,UACd,wBAAIA,UAAU,mBAAd,mBACC,yBAAKA,UAAU,oBACb,kBAAC,EAAD,CAAQU,MAAM,eAAKC,KAAK,QACxB,kBAAC,EAAD,CAAQD,MAAM,eAAKC,KAAK,SACxB,kBAAC,EAAD,CAAQD,MAAM,eAAKC,KAAK,WACxB,kBAAC,EAAD,CAAQD,MAAM,eAAKC,KAAK,WACxB,kBAAC,EAAD,CAAQD,MAAM,eAAKC,KAAK,cC1ChBU,QACW,cAA7BC,OAAOjB,SAASkB,UAEe,UAA7BD,OAAOjB,SAASkB,UAEhBD,OAAOjB,SAASkB,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.42015c24.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/china.b4b741b4.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/italy.32266625.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/switzerland.16a7d871.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/uk.bde138ba.jpeg\";","import React from \"react\"\nimport './Destination.css'\n\n\nexport default class Destination extends React.Component {\n  render() {\n    return (\n      <div className=\"destination\">\n        <img src={this.props.img} /> \n        <p className=\"location-text\">{this.props.location}</p>\n        <p className=\"must-see-photos\">{this.props.photos} must see photos</p>\n      </div>\n    )\n  }\n}\n","import React from \"react\"\nimport './Travel.css'\n\nexport default class Travel extends React.Component {\n  render() {\n    return (\n      <div className=\"travel-component-container\"> \n          <div className=\"travel-emoji\">\n            {this.props.emoji}\n          </div>\n          {this.props.type}\n      </div> \n    )\n  }\n}\n","import React from 'react';\nimport './App.css';\nimport italy from './italy.jpeg';\nimport Destination from './Destination/Destination';\nimport Travel from './Travel/Travel';\nimport switzerland from './switzerland.jpeg';\nimport china from './china.jpeg';\nimport uk from './uk.jpeg';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <link href=\"https://fonts.googleapis.com/css2?family=Poppins:wght@300;600&display=swap\" rel=\"stylesheet\"></link>\n      <link href=\"https://fonts.googleapis.com/css2?family=Poppins&display=swap\" rel=\"stylesheet\" />\n\n      <div className=\"main-container\">\n        <img src={italy} className=\"italy-image\" alt=\"Lake in Italy\"/>\n        <p className=\"TooTravel\">\n          TooTravel\n        </p>\n        <p className=\"main-text\">\n          The most beautiful places in the world!\n        </p>\n        <p className=\"supplementary-text\">\n          Plan your vacation to the most beautiful places in the world\n        </p>\n        <button>Get Started</button>\n      </div>\n\n      <div className=\"Right\">\n        <nav>\n          <h1 className=\"Discover\">Discover</h1>\n          <ul>\n            <li className=\"Popular\">Popular</li>\n            <li>Adventure</li>\n            <li>Tour</li>\n          </ul>\n        </nav>\n        \n        <div className=\"destinations\">\n          <div className=\"image-container\">\n            <Destination img={switzerland} location=\"Switzerland\" photos=\"32\" rating=\"5.0\" alt=\"Scenic Switzerland\"/>\n            <Destination img ={china} location=\"China\" photos=\"56\" rating=\"4.8\" alt=\"Scenic China\"/>\n            <Destination img={uk} location=\"UK\" photos=\"32\" rating=\"4.6\" alt=\"scenic UK\"/>\n            <Destination img ={china} location=\"China\" photos=\"32\" rating=\"5.0\" alt=\"scenic China\"/>\n          </div>\n        </div>\n\n        <div className=\"travel\">\n         <h2 className=\"Types-of-Travel\">Types of Travel</h2> \n          <div className=\"travel-container\">\n            <Travel emoji=\"✈️\" type=\"All\"/>\n            <Travel emoji=\"👨\" type=\"Solo\"/>\n            <Travel emoji=\"⭐️\" type=\"Luxury\"/>\n            <Travel emoji=\"🦁\" type=\"Safari\"/>\n            <Travel emoji=\"🍣\" type=\"Food\"/> \n          </div>\n        </div>\n\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}